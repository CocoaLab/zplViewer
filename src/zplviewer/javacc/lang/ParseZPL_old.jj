options {
    STATIC=false;
}


PARSER_BEGIN(ParseZPL)
import zplviewer.*;
import java.util.Vector;

public class ParseZPL {   
    Label label;
    Vector<Label> labels = new Vector<Label>();
    
    public Label getLabel() { return label; }
    public Vector<Label> getLabels() { return labels; }
}
PARSER_END(ParseZPL)

SKIP : { " " | "\n" | "\r" | "\r\n" }

TOKEN : { 
  < C_START : "^XA" >
| < C_END : "^XZ" >
| < C_LH : "^LH" >
| < C_FO : "^FO" >
| < C_FS : "^FS" >
// | < C_FD : "^FD" >
| < C_BC : "^BC" >
| < C_BY : "^BY" >
| < C_MC : "^MC" >
| < C_ID : "^ID" >
| < C_LR : "^LR" >
| < C_FW : "^FW" >
| < C_CF : "^CF" >
| < C_CI : "^CI" >
| < C_PR : "^PR" >
| < C_PO : "^PO" >
| < C_PM : "^PM" >
| < C_GB : "^GB" >
| < C_A : "^A" >
| < C_PQ : "^PQ" >
| < CHAR : ( [ "A" - "Z" ] ) >
| < FLOAT : ( ([ "0" - "9" ])+ "." ([ "0" - "9" ]) + ) >
| < DIGIT : ( [ "0" - "9" ] ) >
| < NUMBER : (["0" - "9"])+ >
| < FD_STRING : "^FD" (["A" - "Z" , "a" - "z", "0" - "9", " ", "\t", ":", ".", ">", ";", "@", "(", ")"])+ >
| < ID_STRING : "^ID" (["A" - "Z" , "a" - "z", "0" - "9", " ", "\t", ":", ".", ">", ";", "@", "(", ")"])+ >
}


void parse() : {}
{
    label() ( label() )* <EOF>
}

void label() : {}
{
    label_start()

  (
    ( label_home() )    
  | ( map_clear() )
  | ( new_field() )
  | ( image_delete() )
  | ( label_reverse_print() )
  | ( field_orientation() )
  | ( change_default_font() )
  | ( change_international_font() )
  | ( change_print_rate() )
  | ( print_orientation() )
  | ( print_mirror_image() )  
  | ( set_font( label.currentFont ) )
  | ( set_barcode_defaults( label.bd) )  
  | ( print_quantity() )
  )*

    label_end()
}


void label_start(): {}
{
    <C_START> 
    { 
        label = new Label(); 
        labels.add( label );
        return;
    }
}

void label_end(): {}
{
    <C_END> { return; }
}

void label_home() : 
{
    Label.XY xy;
}
{
    <C_LH> 
    xy = optionXY( 0, 0 )
    { 
        label.setLabelHome( xy );
        System.out.println( "a: " + xy.x + " b: " + xy.y ); 
        return;
    }
}

Label.XY optionXY( int dx, int dy) :
{
    Integer a = dx, b = dy; 
    Token sa;
    Token sb;
}
{    
    (
        ( sa = <NUMBER> { a = new Integer( sa.image ); } 
            |
          sa = <DIGIT> { a = new Integer( sa.image ); }
        )?
        ","
        ( sb = <NUMBER> { b = new Integer( sb.image ); }
           |
          sb = <DIGIT> { b = new Integer( sb.image ); }
        )
    )?
    { return new Label.XY( a, b ); }       
}

void new_field() :
{
    Label.XY xy;
    Label.Field field;
    Token data;
}
{
    <C_FO>
    xy = optionXY( 0, 0 ) { field = new Label.Field( xy.x, xy.y ); }
    (  set_font( field.font ) 
        |
       set_barcodeCode128( field ) 
        |
       set_barcode_defaults( field.bd )
    )*
    ( 
        ( 
            // <C_FD> 
            data = <FD_STRING> { field.data = data.image; }
        ) 
        |
        ( 
            graphical_box()
        )
    )?
    <C_FS> { label.addField( field ); }
}

void get_font_name( Token font_name ) :
{}
{
    font_name = <DIGIT>
    |
    font_name = <CHAR>
}

void set_font( Label.Font font ) : 
{
    Token font_name = null;
    Token orientation = null;
    Token height = null;
    Token width = null;
}
{
    <C_A>      
       get_font_name( font_name )                  
       orientation = <CHAR>
       ( ","
          ( height = <NUMBER> )?
          ( ","
             ( width = <NUMBER> )?
          )?
       )?                     
     { 
        if( font_name != null )
            font.font = font_name.image;

        if( orientation != null )
            font.font_orientation = orientation.image;

        if( height != null )
            font.font_height = height.image;

        if( width != null )
            font.font_width = width.image;

        return;
     }
}

void set_barcodeCode128( Label.Field field ) :
{
    Token orientation = null;
    Token height = null;
    Token print_interpolation = null;
    Token ucc_check_digit = null;
    Token mode = null;
}
{
    <C_BC>
      (
        ( orientation = <CHAR> )?
        ( ","
          ( height = <NUMBER>
            |
            height = <DIGIT>
          )?
          ( ","
            ( 
                print_interpolation = <CHAR>              
            )?
            ( ","
              ( 
                ucc_check_digit = <CHAR> 
              )?
              ( ","
                (
                    mode = <CHAR>
                )?
              )?
            )?
          )?          
        )?
      )     
   {
        if( orientation != null )
            field.code128_orientation = orientation.image;
        if( height != null )
            field.code128_height = height.image;
        if( print_interpolation != null )
            field.code128_interpolation = print_interpolation.image;
        if( ucc_check_digit != null )
            field.code128_ucc_check_digit = ucc_check_digit.image;
        if( mode != null )
            field.code128_mode = mode.image;

        return;
   }
}

void set_barcode_defaults( Label.BarcodeDefaults bd) :
{
    Token width = null;
    Token height = null;
    Token narrow = null;
}
{
    <C_BY>
    ( 
        ( width = <DIGIT>
            |
          width = <NUMBER>
        )?
        ( ","
          ( 
            narrow = <FLOAT>
          )?
          ( ","
            (
                height = <DIGIT>
                   |
                height = <NUMBER>
            )?
          )?
        )?
    )
    {
        if( width != null )
            bd.width = width.image;
        if( height != null )
            bd.height = height.image;
        if( narrow != null )
            bd.narrow = narrow.image;

        return;
    }
}

/* not implemented */
void map_clear() :
{}
{
    <C_MC>
    ( <CHAR> )? 
}

/* not implemented */
void image_delete() :
{}
{   
    <ID_STRING>
    <C_FS>
}

/* todo */
void label_reverse_print() : 
{}
{
    <C_LR>
    ( <CHAR> )?
}

/* todo */
void field_orientation() :
{}
{
    <C_FW>
    ( <CHAR> )?
}

/* todo */
void change_default_font() :
{}
{
    <C_CF>
    ( 
        /* font */
       ( <CHAR> 
          |
         <DIGIT>
        )?
       ( "," 
            /* height */
            ( <DIGIT> 
                |
              <NUMBER>
            )?
            ( ","
                /* width */
                ( <DIGIT>
                    |
                  <NUMBER>
                )?
             )?
         )?
     )
}

/* not implemented java has UTF8 */
void change_international_font() :
{}
{
    <C_CI>
    ( 
        <DIGIT> 
        |
        <NUMBER>
    )
}

/* not implenented */
void change_print_rate() :
{}
{
    <C_PR>
    (
        ( 
            <CHAR>
            |
            <DIGIT>
        )?
        ( ","
            ( 
                <CHAR>
                |
                <DIGIT>
             )?
             ( ","
                ( 
                    <CHAR>
                    |
                    <DIGIT>
                )?
             )?
         )?        
    )
}

/* todo */
void print_orientation() :
{}
{
    <C_PO>
    <CHAR>
}

/* todo */
void print_mirror_image() :
{}
{
    <C_PM>
    <CHAR>
}

/* todo */
void graphical_box() :
{}
{
    <C_GB>
    (     
        ( <DIGIT> | <NUMBER> )? // width
        ( ","
            ( <DIGIT> | <NUMBER> )? // height
            ( ","
                ( <DIGIT> | <NUMBER> )? // thickness
                ( ","
                    (<CHAR>)? // line color black or white
                )?
            )?
        )?
    )
}

/* ignore */
void print_quantity() :
{}
{
    <C_PQ> <DIGIT> "," <DIGIT> "," <DIGIT> "," <CHAR>
}

