/* Generated By:JavaCC: Do not edit this line. ParseZPL.java */
package zplviewer.javacc;

import zplviewer.*;
import java.util.Vector;

public class ParseZPL implements ParseZPLConstants {
    Label label;
    Vector<Label> labels = new Vector<Label>();

    public Label getLabel() { return label; }
    public Vector<Label> getLabels() { return labels; }

  final public void parse() throws ParseException {
    label();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_XA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      label();
    }
    jj_consume_token(0);
  }

  final public void label() throws ParseException {
    label_start();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_MC:
      case C_LH:
      case C_FO:
      case C_FT:
      case C_LR:
      case C_FW:
      case C_CF:
      case C_CI:
      case C_PR:
      case C_PO:
      case C_PM:
      case C_PQ:
      case C_BY:
      case C_LL:
      case C_MT:
      case C_MM:
      case C_MN:
      case C_MD:
      case C_A:
      case C_AO:
      case C_ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_LH:
        label_home();
        break;
      case C_MC:
        map_clear();
        break;
      case C_FO:
      case C_FT:
        new_field();
        break;
      case C_A:
      case C_AO:
        set_font(label.currentFont);
        break;
      case C_LR:
        label_reverse_print();
        break;
      case C_FW:
        field_orientation();
        break;
      case C_CF:
        change_default_font(label.currentFont);
        break;
      case C_CI:
        change_international_font();
        break;
      case C_PR:
        change_print_rate();
        break;
      case C_PO:
        print_orientation();
        break;
      case C_PM:
        print_mirror_image();
        break;
      case C_ID:
        image_delete();
        break;
      case C_BY:
        set_barcode_defaults(label.bd);
        break;
      case C_PQ:
        print_quantity();
        break;
      case C_LL:
        set_label_length();
        break;
      case C_MT:
        media_type();
        break;
      case C_MM:
        print_mode();
        break;
      case C_MN:
        media_tracking();
        break;
      case C_MD:
        media_darknes();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_end();
  }

  final public void label_start() throws ParseException {
    jj_consume_token(C_XA);
        label = new Label();
        labels.add( label );
        {if (true) return;}
  }

  final public void label_end() throws ParseException {
    jj_consume_token(C_XZ);
  }

  final public Token number() throws ParseException {
    Token number = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGIT:
      number = jj_consume_token(DIGIT);
      break;
    case NUMBER:
      number = jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return number;}
    throw new Error("Missing return statement in function");
  }

  final public Label.XY optionXY(int dx, int dy) throws ParseException {
    Integer a = dx, b = dy;
    Token sa;
    Token sb;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGIT:
    case NUMBER:
    case 42:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case NUMBER:
        sa = number();
                          a = new Integer( sa.image );
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(42);
      sb = number();
                          b = new Integer( sb.image );
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
      {if (true) return new Label.XY( a, b );}
    throw new Error("Missing return statement in function");
  }

  final public void label_home() throws ParseException {
    Label.XY xy = new Label.XY();
    jj_consume_token(C_LH);
    xy = optionXY(0, 0);
        label.setLabelHome( xy );
        System.out.println( "a: " + xy.x + " b: " + xy.y );
        {if (true) return;}
  }

/* not implemented */
  final public void map_clear() throws ParseException {
    jj_consume_token(C_MC);
  }

  final public void new_field() throws ParseException {
    Label.XY xy;
    Label.Field field;
    Token data;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_FO:
      jj_consume_token(C_FO);
      break;
    case C_FT:
      jj_consume_token(C_FT);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    xy = optionXY(0, 0);
                            field = new Label.Field( xy.x, xy.y );
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_BC:
      case C_BY:
      case C_B3:
      case C_FR:
      case C_A:
      case C_AO:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_A:
      case C_AO:
        set_font(field.font);
        break;
      case C_BC:
        set_barcodeCode128(field);
        break;
      case C_BY:
        set_barcode_defaults(field.bd);
        break;
      case C_B3:
        set_barcodeCode39(field);
        break;
      case C_FR:
        field_reverse_print(field);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_GB:
    case C_SN:
    case C_XG:
    case C_GS:
    case C_FD:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C_GS:
      case C_FD:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case C_GS:
          graphical_symbol(field);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(C_FD);
        data = jj_consume_token(STRING);
                              field.data = data.image;
        break;
      case C_GB:
        graphical_box(field);
        break;
      case C_SN:
        serialization_data(field);
        break;
      case C_XG:
        recall_graphic();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(C_FS);
        System.out.println( "font: " + field.font.name );

        if( field.font.name.isEmpty() ) {
            field.font = label.currentFont.clone();
            System.out.println( "choosing default font: " + field.font.name );
        }

        label.addField( field );
  }

  final public Token get_font_name() throws ParseException {
    Token font_name = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGIT:
      font_name = jj_consume_token(DIGIT);
      break;
    case CHAR:
      font_name = jj_consume_token(CHAR);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return font_name;}
    throw new Error("Missing return statement in function");
  }

  final public void set_font(Label.Font font) throws ParseException {
    Token font_name = null;
    Token orientation = null;
    Token height = null;
    Token width = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C_A:
      jj_consume_token(C_A);
      font_name = get_font_name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHAR:
          orientation = jj_consume_token(CHAR);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DIGIT:
          case NUMBER:
            height = number();
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 42:
            jj_consume_token(42);
            width = number();
            break;
          default:
            jj_la1[15] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    case C_AO:
      jj_consume_token(C_AO);
                font.name = getToken(0).image.substring(2,3);
                font.orientation = getToken(0).image.substring(3);
                System.out.println( "name: " + font.name + " or: " + font.orientation );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGIT:
        case NUMBER:
          height = number();
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
          width = number();
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if( font_name != null )
            font.name = font_name.image;

        if( orientation != null )
            font.orientation = orientation.image;

        if( height != null )
            font.height = height.image;

        if( width != null )
            font.width = width.image;

         System.out.println( "font: " + font.name + " height: " +  font.height + " width: " + font.width );

        {if (true) return;}
  }

/* ignore */
  final public void print_quantity() throws ParseException {
    jj_consume_token(C_PQ);
    jj_consume_token(DIGIT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        jj_consume_token(DIGIT);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGIT:
          jj_consume_token(DIGIT);
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
          jj_consume_token(CHAR);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

/* todo */
  final public void print_mirror_image() throws ParseException {
    jj_consume_token(C_PM);
    jj_consume_token(CHAR);
  }

/* todo */
  final public void print_orientation() throws ParseException {
    jj_consume_token(C_PO);
    jj_consume_token(CHAR);
  }

/* not required to implement */
  final public void change_print_rate() throws ParseException {
    jj_consume_token(C_PR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGIT:
    case CHAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case DIGIT:
        jj_consume_token(DIGIT);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case CHAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHAR:
          jj_consume_token(CHAR);
          break;
        case DIGIT:
          jj_consume_token(DIGIT);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGIT:
        case CHAR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CHAR:
            jj_consume_token(CHAR);
            break;
          case DIGIT:
            jj_consume_token(DIGIT);
            break;
          default:
            jj_la1[31] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
  }

/* not implemented java has UTF8 */
  final public void change_international_font() throws ParseException {
    jj_consume_token(C_CI);
    number();
  }

/* todo */
  final public void change_default_font(Label.Font font) throws ParseException {
    Token font_name = null;
    Token orientation = null;
    Token height = null;
    Token width = null;
    jj_consume_token(C_CF);
    font_name = get_font_name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case NUMBER:
        height = number();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        width = number();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
        if( font_name != null )
            font.name = font_name.image;

        if( orientation != null )
            font.orientation = orientation.image;

        if( height != null )
            font.height = height.image;

        if( width != null )
            font.width = width.image;

         System.out.println( "default font: " + font.name + " height: " +  font.height + " width: " + font.width );

        {if (true) return;}
  }

/* todo */
  final public void label_reverse_print() throws ParseException {
    jj_consume_token(C_LR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      jj_consume_token(CHAR);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
  }

/* todo */
  final public void field_orientation() throws ParseException {
    jj_consume_token(C_FW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      jj_consume_token(CHAR);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
  }

/* not implemented */
  final public void image_delete() throws ParseException {
    jj_consume_token(C_ID);
    jj_consume_token(STRING);
    jj_consume_token(C_FS);
  }

/* todo */
  final public void graphical_box(Label.Field field) throws ParseException {
    Token width = null;
    Token height = null;
    Token thickness = null;
    Token color = null;
    jj_consume_token(C_GB);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGIT:
    case NUMBER:
      width = number();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case NUMBER:
        height = number();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGIT:
        case NUMBER:
          thickness = number();
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CHAR:
            color = jj_consume_token(CHAR);
            break;
          default:
            jj_la1[43] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[44] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
        field.gb = new Label.GraphicalBox();

        if( width != null )
            field.gb.width = new Integer( width.image );

        if( height != null )
            field.gb.height = new Integer( height.image );

        if( thickness != null )
            field.gb.thickness = new Integer( thickness.image );

        if( color != null )
            field.gb.color = color.image.charAt(0);
  }

  final public void set_barcodeCode128(Label.Field field) throws ParseException {
    Token orientation = null;
    Token height = null;
    Token print_interpolation = null;
    Token ucc_check_digit = null;
    Token mode = null;
    Token print_above = null;
    jj_consume_token(C_BC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      orientation = jj_consume_token(CHAR);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case NUMBER:
        height = number();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHAR:
          print_interpolation = jj_consume_token(CHAR);
          break;
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CHAR:
            print_above = jj_consume_token(CHAR);
            break;
          default:
            jj_la1[50] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 42:
            jj_consume_token(42);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CHAR:
              ucc_check_digit = jj_consume_token(CHAR);
              break;
            default:
              jj_la1[51] = jj_gen;
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 42:
              jj_consume_token(42);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case CHAR:
                mode = jj_consume_token(CHAR);
                break;
              default:
                jj_la1[52] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[53] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[54] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[55] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
        if( orientation != null )
            field.code128_orientation = orientation.image;
        if( height != null )
            field.code128_height = height.image;
        if( print_interpolation != null )
            field.code128_interpolation = print_interpolation.image;
        if( ucc_check_digit != null )
            field.code128_ucc_check_digit = ucc_check_digit.image;
        if( mode != null )
            field.code128_mode = mode.image;

        field.isCode128 = true;

        {if (true) return;}
  }

  final public void set_barcode_defaults(Label.BarcodeDefaults bd) throws ParseException {
    Token width = null;
    Token height = null;
    Token narrow = null;
    jj_consume_token(C_BY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGIT:
    case NUMBER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        width = jj_consume_token(DIGIT);
        break;
      case NUMBER:
        width = jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
        narrow = jj_consume_token(FLOAT);
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGIT:
        case NUMBER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DIGIT:
            height = jj_consume_token(DIGIT);
            break;
          case NUMBER:
            height = jj_consume_token(NUMBER);
            break;
          default:
            jj_la1[61] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[62] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
        if( width != null )
            bd.width = width.image;
        if( height != null )
            bd.height = height.image;
        if( narrow != null )
            bd.narrow = narrow.image;

        {if (true) return;}
  }

/* todo? */
  final public void set_label_length() throws ParseException {
    jj_consume_token(C_LL);
    number();
  }

/* todo */
  final public void set_barcodeCode39(Label.Field field) throws ParseException {
    Token orientation = null;
    Token height = null;
    Token print_interpolation = null;
    Token mod43_check_digit = null;
    Token mode = null;
    Token print_above = null;
    jj_consume_token(C_B3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      orientation = jj_consume_token(CHAR);
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
        mod43_check_digit = jj_consume_token(CHAR);
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGIT:
        case NUMBER:
          height = number();
          break;
        default:
          jj_la1[67] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CHAR:
            print_interpolation = jj_consume_token(CHAR);
            break;
          default:
            jj_la1[68] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 42:
            jj_consume_token(42);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CHAR:
              print_above = jj_consume_token(CHAR);
              break;
            default:
              jj_la1[69] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[70] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[71] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
        if( orientation != null )
            field.code39_orientation = orientation.image;
        if( height != null )
            field.code39_height = height.image;
        if( print_interpolation != null )
            field.code39_interpolation = print_interpolation.image;
        if( mod43_check_digit != null )
            field.code39_mod43_check_digit = mod43_check_digit.image;

        field.isCode39 = true;

        {if (true) return;}
  }

/* todo */
  final public void field_reverse_print(Label.Field field) throws ParseException {
    jj_consume_token(C_FR);
  }

/* todo? */
  final public void serialization_data(Label.Field field) throws ParseException {
    Token starting = null;
    jj_consume_token(C_SN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGIT:
    case NUMBER:
      starting = number();
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case NUMBER:
        number();
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        jj_consume_token(CHAR);
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
        field.isSerialsation = true;

        if( starting != null )
            field.data = starting.image;
        else
            field.data = "1";
  }

/* todo */
  final public void recall_graphic() throws ParseException {
    jj_consume_token(C_XG);
    jj_consume_token(STRING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case NUMBER:
        number();
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        number();
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
  }

/* todo */
  final public void graphical_symbol(Label.Field field) throws ParseException {
    Token width = null;
    Token height = null;
    jj_consume_token(C_GS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      jj_consume_token(CHAR);
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case NUMBER:
        height = number();
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        width = number();
        break;
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    field.isGraphicalSymbol = true;

    if( height != null )
        field.font.height = height.image;

    if( width != null )
        field.font.width = width.image;
  }

/* ignored */
  final public void media_type() throws ParseException {
    jj_consume_token(C_MT);
    jj_consume_token(CHAR);
  }

/* ignored */
  final public void print_mode() throws ParseException {
    jj_consume_token(C_MM);
    jj_consume_token(CHAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      jj_consume_token(CHAR);
      break;
    default:
      jj_la1[85] = jj_gen;
      ;
    }
  }

/* ignored */
  final public void media_tracking() throws ParseException {
    jj_consume_token(C_MN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      jj_consume_token(CHAR);
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
  }

/* ignored */
  final public void media_darknes() throws ParseException {
    jj_consume_token(C_MD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGIT:
    case NUMBER:
      number();
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
  }

  public ParseZPLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[88];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x20,0xe157f780,0xe157f780,0x0,0x0,0x0,0x600,0x2e00000,0x2e00000,0x10000000,0x1c080000,0x1c080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x17,0x17,0x60,0x60,0x460,0x0,0x6,0x6,0x0,0x8,0x8,0xa0,0x80,0x60,0x400,0x400,0x400,0x60,0x400,0x400,0x6,0x20,0x20,0x400,0x400,0x400,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0x400,0x400,0x60,0x400,0x400,0x80,0x80,0x60,0x60,0x60,0x80,0x400,0x400,0x400,0x80,0x60,0x80,0x80,0x80,0x80,0x400,0x400,0x400,0x400,0x400,0x60,0x60,0x100,0x60,0x60,0x400,0x400,0x80,0x80,0x60,0x80,0x80,0x400,0x400,0x400,0x400,0x60,0x60,0x400,0x400,0x60,0x400,0x400,0x80,0x60,0x400,0x400,0x400,0x80,0x60,};
   }

  public ParseZPL(java.io.InputStream stream) {
     this(stream, null);
  }
  public ParseZPL(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParseZPLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
  }

  public ParseZPL(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParseZPLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
  }

  public ParseZPL(ParseZPLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
  }

  public void ReInit(ParseZPLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[43];
    for (int i = 0; i < 43; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 88; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
